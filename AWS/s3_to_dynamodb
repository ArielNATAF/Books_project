# Lambda Function to Load the S3 file data into Dynaodb
# Increase the time duration to 15 mins which is maximum

import json
import boto3
import uuid   

s3_client = boto3.client('s3')       #using boto3 client to connect s3
dynamodb = boto3.resource("dynamodb") #using boto3 client to connect Dynamodb
table = dynamodb.Table('book_master') # Data gets loaded in this table.


def lambda_handler(event, context):
    try:
        bucket_name = event["Records"][0]["s3"]["bucket"]["name"]   #to get the bucket name inside s3
        s3_file_name = event["Records"][0]["s3"]["object"]["key"]   #to get the file name inside s3 bucket
    
        response = s3_client.get_object(Bucket = bucket_name, Key = s3_file_name)
        data = response["Body"].read().decode('utf-8')
        print(data)   # print the bucket and filename in s3
        print(uuid.uuid4())
        book = data.split('\n')  # rows are sepearted by new line
        row = 0                     # initilizing the first row
        for book_array in book:
            if row == 0:            # Skipping the first line as it a header
                row = row+1
                continue
            book_array = book_array.split('|')      # columns are seperated by '|' and each value is geeting stored in the array
            table.put_item(
                #next_book_id = max_book_id+1
                Item = {
                    'uid': str(uuid.uuid4()),          # its unique value generated by python uuid package
                    'book_id': book_array[0],          # this is a sortkey column in Dynomodb.
                    'isbn': book_array[1],             # below are the column gets created in the Dynamodb.
                    'isbn_13': book_array[2],
                    'book_title': book_array[3],
                    'book_author': book_array[4],
                    'year_of_publication': book_array[5],
                    'Category': book_array[6],
                    'Category_2': book_array[7],
                    'book_description': book_array[8],
                    'book_language': book_array[9],
                    'number_of_pages': book_array[10],
                    'author_genres': book_array[11],
                    'author_genres_2': book_array[12],
                    'book_average_rating': book_array[13],
                    'awards': book_array[14],
                    'data_source': 'web_scrapping',
                    'is_active': 1,
                    
                }
            )
    except Exception as err:
        print(err)
    return {
        'statusCode': 200,
        'body': json.dumps('Hello Jimmy!')
    }
